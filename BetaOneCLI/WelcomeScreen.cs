
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.20.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace BetaOneCLI
{
    using System.ComponentModel;
    using System.Net;
    using Terminal.Gui;
    using Terminal.Gui.TextValidateProviders;
    using static BetaOneCLI.Persistency;

    public partial class WelcomeScreen
    {

        public WelcomeScreen()
        {
            InitializeComponent();

            Colors.Base.Normal = Application.Driver.MakeAttribute(Color.Gray, Color.Black);
            Colors.Base.HotNormal = Application.Driver.MakeAttribute(Color.Cyan, Color.Black);
            Colors.Base.Focus = Application.Driver.MakeAttribute(Color.Black, Color.DarkGray);
            Colors.Base.HotFocus = Application.Driver.MakeAttribute(Color.Cyan, Color.DarkGray);

            ClientConfig cfg = Persistency.loadConfiguration();

            fieldPassword.Secret = true;

            fieldPassword.Text = cfg.Password;
            field_login.Text = cfg.Name;

            this.welcomeScreen.Finished += (args) =>
            {

                // Create an instance of the InputDialog
                var inputDialog = new ConnectDialog();

                // Run the InputDialog modally

                Application.Run(inputDialog);



            };
        }
    }


    class ConnectDialog : Dialog
    {
        // Define a TextField widget for the input
        private TextValidateField inputField = new TextValidateField()
        {
            X = 0,
            Y = 0,
            Width = Dim.Fill(),
            Provider = new TextRegexProvider(@"^")

        };

        Button Okay = new Button("Connect", true);

        public ConnectDialog() : base("Connection", 50, 10)
        {
            // Add the input field to the dialog
            Add(inputField);
            // Add an "OK" button
            AddButton(Okay);


            inputField.Y = Pos.Center();

            Add(new Label("IP:PORT")
            {
                Y = Pos.Center() - 2

            });

            if (Persistency.LocalConfig.PORT != null || Persistency.LocalConfig.IP != null)
                inputField.Text = Persistency.LocalConfig.IP + ":" + Persistency.LocalConfig.PORT;

            Okay.Clicked += checkServerCon;

        }

        public void checkServerCon()
        {

            if (!GetIPAddress())
                return;

            Notification n = Notification.Show("Connecting...", false);
            Program.client = new BetaOne.Client();

            n.removeSelf();

            /*


            bool isCon = Program.client.Init(Persistency.LocalConfig.IP, Persistency.LocalConfig.PORT);

            Application.MainLoop.Invoke(() =>
            {
                Application.RequestStop();

            });

            */



    }


    public bool GetIPAddress()
    {
        string result = inputField.Text.ToString();

        if (result != null)
        {
            string[] ipformat = result.Split(':');

            if (ipformat.Length != 2)
            {
                Notification.Show("Please provide IP and Port");
                return false;
            }

            IPAddress ipAddress = null;

            bool success = IPAddress.TryParse(ipformat[0], out ipAddress);

            if (!success)
            {
                Notification.Show("Incorrect IP Format");
                return false;
            }

            Persistency.LocalConfig.IP = ipformat[0];
            Persistency.LocalConfig.PORT = int.Parse(ipformat[1]);

            return true;
        }

        return false;

    }


    public string GetInput()
    {
        return inputField.Text.ToString();
    }
}


}
